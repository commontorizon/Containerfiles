# Copyright (c) 2023 Matheus Castello
# SPDX-License-Identifier: MIT

ARG REGISTRY=
ARG IMAGE_ARCH=
ARG BASE_REGISTRY=
ARG BASE_IMAGE=
ARG BASE_VERSION=
ARG BASE_VERSION2=
ARG BASE_IMAGE2=
ARG GPU=

FROM ${BASE_REGISTRY}${BASE_IMAGE}-${IMAGE_ARCH}:${BASE_VERSION} AS SDK

ARG REGISTRY
ARG IMAGE_ARCH
ARG BASE_REGISTRY
ARG BASE_IMAGE
ARG BASE_VERSION
ARG BASE_VERSION2
ARG BASE_IMAGE2
ARG GPU

LABEL org.opencontainers.image.source https://github.com/commontorizon/Contaierfiles
LABEL org.opencontainers.image.authors "microhobby <matheus@castello.eng>"
LABEL org.opencontainers.image.title "Slint SDK"
LABEL org.opencontainers.image.description "Slint SDK Base Image"
LABEL org.opencontainers.image.licenses "MIT"

# Install an up-to-date cmake as well as ninja and make
RUN apt-get update && \
    apt-get install --assume-yes gpg wget && \
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null && \
    echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null && \
    apt-get update && \
    apt-get install --assume-yes cmake ninja-build make && \
    rm -rf /var/lib/apt/lists/*

COPY --chmod=755 armhf-toolchain.cmake arm64-toolchain.cmake /

RUN if [ "$IMAGE_ARCH" = "arm64" ] ; then \
        echo aarch64-unknown-linux-gnu > /rust-toolchain-arch.txt; \
        echo arm64 > /cross-toolchain-arch.txt; \
        dpkg-divert --divert /usr/bin/cmake.real --rename /usr/bin/cmake; \
        printf '#!/bin/sh\nexport CMAKE_TOOLCHAIN_FILE=/arm64-toolchain.cmake\nexec /usr/bin/cmake.real $*\n' > /usr/bin/cmake; \
        chmod 755 /usr/bin/cmake ;\
    elif [ "$IMAGE_ARCH" = "arm" ] ; then \
        echo armv7-unknown-linux-gnueabihf > /rust-toolchain-arch.txt; \
        echo armhf > /cross-toolchain-arch.txt; \
        dpkg-divert --divert /usr/bin/cmake.real --rename /usr/bin/cmake; \
        printf '#!/bin/sh\nexport CMAKE_TOOLCHAIN_FILE=/armhf-toolchain.cmake\nexec /usr/bin/cmake.real $*\n' > /usr/bin/cmake; \
        chmod 755 /usr/bin/cmake ;\
    elif [ "$IMAGE_ARCH" = "amd64" ] ; then \
        echo x86_64-unknown-linux-gnu > /rust-toolchain-arch.txt; \
        echo amd64 > /cross-toolchain-arch.txt; \
    fi

# Install Rust
ENV RUSTUP_HOME=/rust
ENV CARGO_HOME=/cargo
ENV PATH=/cargo/bin:/rust/bin:$PATH

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
RUN rustup target add $(cat /rust-toolchain-arch.txt)

# Install Slint build dependencies (libxcb, etc.)
RUN \
    --mount=type=cache,target=/var/cache/apt \
    CROSS_TOOLCHAIN_ARCH=$(cat /cross-toolchain-arch.txt) && \
    apt-get update && \
    apt-get install --assume-yes \
    libfontconfig1-dev:$CROSS_TOOLCHAIN_ARCH \
    libxcb1-dev:$CROSS_TOOLCHAIN_ARCH \
    libxcb-render0-dev:$CROSS_TOOLCHAIN_ARCH \
    libxcb-shape0-dev:$CROSS_TOOLCHAIN_ARCH \
    libxcb-xfixes0-dev:$CROSS_TOOLCHAIN_ARCH \
    libxkbcommon-dev:$CROSS_TOOLCHAIN_ARCH \
    python3 \
    clang \
    libstdc++-11-dev:$CROSS_TOOLCHAIN_ARCH && \
    rm -rf /var/lib/apt/lists/*

# Don't require font-config when the compiler runs
ENV RUST_FONTCONFIG_DLOPEN=on

# Default to Ninja
ENV CMAKE_GENERATOR=Ninja

# Build Slint
##
# ⚠️ BUILDING SLINT v1.3.2
# ⚠️ Check available versions here: https://github.com/slint-ui/slint/releases
##
RUN git clone https://github.com/slint-ui/slint --depth 1 --branch v1.3.2 /slint
RUN RUST_TOOLCHAIN_ARCH=$(cat /rust-toolchain-arch.txt) && \
    cd /slint \
    && mkdir build \
    && cd build \
    && cmake -DRust_CARGO_TARGET=$RUST_TOOLCHAIN_ARCH .. \
       -DCMAKE_INSTALL_PREFIX=/usr \
       -DCMAKE_BUILD_TYPE=Release \
       -DSLINT_FEATURE_RENDERER_WINIT_SKIA=ON -DSLINT_FEATURE_RENDERER_WINIT_FEMTOVG=OFF \
       -DSLINT_FEATURE_BACKEND_WINIT=OFF -DSLINT_FEATURE_BACKEND_WINIT_WAYLAND=ON \
    && cmake --build . \
    && cmake --install . \
    && cd / \
    && rm -rf /slint
